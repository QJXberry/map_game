{"ast":null,"code":"import { darkblue } from '../configs';\nexport default class CanvasTool {\n  constructor(canvasObj, callback) {\n    this.width = 400;\n    // canvas width\n    this.height = 400;\n    // canvas height\n    this.squareSize = 60;\n    // square size\n    this.circleRadius = 10;\n    // circle radius\n    this.model = undefined;\n    // model\n    this.originModel = undefined;\n    // Backup model\n    this.columns = 4;\n    // Default 4x4\n    this.rows = 4;\n    // Default 4x4\n    this.minXY = this.squareSize;\n    // The smallest coordinates of a circle\n    this.maxXY = (this.columns - 1) * this.minXY;\n    // The maximum coordinates of a circle\n    this.ctx = undefined;\n    // canvas context\n    this.squares = [];\n    // Square array\n    this.points = [];\n    // {x: number, y: number, highlight?: boolean}[]\n    this.activeSquares = [];\n    // [topLeftData, topRightData, bottomRightData, bottomLeftData]\n    this.canvas = undefined;\n    // Dom Canvas\n    this.moveCounter = 0;\n    // move counter\n    this.gameOver = false;\n    // gameOver\n    this.emit = () => {};\n    // Dispatch event\n    this.bindClick = this.processClick.bind(this);\n    this.canvas = canvasObj;\n    this.ctx = canvasObj.getContext(\"2d\");\n    this.width = canvasObj.width;\n    this.height = canvasObj.height;\n    canvasObj.addEventListener(\"click\", this.bindClick); // Bind click event\n    this.emit = callback || (() => {});\n  }\n  // Load model Reset model\n  loadModel(model, name) {\n    // reset canvas\n    this.resetTransform();\n    this.clearRect();\n    // reset initial data\n    this.originModel = model;\n    this.model = JSON.parse(JSON.stringify(model));\n    this.columns = this.model.board.size;\n    this.rows = this.model.board.size;\n    this.maxXY = (this.columns - 1) * this.minXY;\n    this.squares = this.model.board.squares;\n    this.points = [];\n    this.activeSquares = [];\n    this.moveCounter = 0;\n    this.gameOver = false;\n    this.addItem(); // Add an Item 5x5\n    // dispatch event\n    this.emit({\n      type: \"message\",\n      data: `Reset and load configuration ${name || \"\"} successfully`\n    });\n    this.emit({\n      type: \"moveCounter\",\n      data: 0\n    });\n    this.emit({\n      type: \"gameOver\",\n      data: false\n    });\n    this.redraw();\n  }\n  // redraw\n  redraw() {\n    this.resetTransform();\n    this.clearRect();\n    // set the origin to the top left of the canvas\n    let translateXY = (400 - this.columns * this.squareSize) / 2;\n    this.ctx.translate(translateXY, translateXY);\n\n    // DRAW SQUARES\n    this.squares.forEach((sq, idx) => {\n      sq.index = idx;\n      this.ctx.fillStyle = sq.color;\n      this.ctx.fillRect(sq.column * this.squareSize, sq.row * this.squareSize, this.squareSize, this.squareSize);\n    });\n\n    // DRAW  BOARD\n    let cacheHighlight = []; // Draw separately to avoid overlaying the highlighted layers\n    this.squares.forEach(sq => {\n      if (!sq.highlight) {\n        this.ctx.strokeStyle = \"black\";\n        this.ctx.lineWidth = 4;\n        this.ctx.strokeRect(sq.column * this.squareSize, sq.row * this.squareSize, this.squareSize, this.squareSize);\n      } else {\n        cacheHighlight.push(sq);\n      }\n    });\n    cacheHighlight.forEach(sq => {\n      this.ctx.strokeStyle = \"rgba(255, 0, 0, 1.00)\";\n      this.ctx.lineWidth = 4;\n      this.ctx.strokeRect(sq.column * this.squareSize, sq.row * this.squareSize, this.squareSize, this.squareSize);\n    });\n    // DRAW OR UPDATE CIRCLES\n    if (!this.points.length) {\n      this.squares.forEach(sq => {\n        let circleX = sq.row * this.squareSize;\n        let circleY = sq.column * this.squareSize;\n        if (circleX >= this.minXY && circleY >= this.minXY && circleY <= this.maxXY && circleY <= this.maxXY) {\n          this.ctx.lineWidth = 2;\n          this.ctx.beginPath();\n          this.ctx.arc(circleX, circleY, this.circleRadius, 2 * Math.PI, false);\n          this.ctx.fillStyle = \"white\";\n          this.ctx.fill();\n          this.ctx.strokeStyle = \"black\";\n          this.ctx.stroke();\n          this.points.push({\n            x: circleX,\n            y: circleY\n          });\n        }\n      });\n    } else {\n      this.points.forEach(point => {\n        this.ctx.lineWidth = 2;\n        this.ctx.beginPath();\n        this.ctx.arc(point.x, point.y, this.circleRadius, 2 * Math.PI, false);\n        this.ctx.fillStyle = point.highlight ? \"rgba(255, 0, 0, 1.00)\" : \"white\";\n        this.ctx.fill();\n        this.ctx.strokeStyle = point.highlight ? \"rgba(255, 0, 0, 1.00)\" : \"black\";\n        this.ctx.stroke();\n      });\n    }\n  }\n  // click event\n  processClick(e) {\n    if (this.gameOver) {\n      return;\n    }\n    // Determine if the click position is inside the circle\n    const canvasRect = this.canvas.getBoundingClientRect();\n    // normalizing RAW point into localized canvas coordinates.\n    let x = e.clientX - canvasRect.left;\n    let y = e.clientY - canvasRect.top;\n    let translateXY = (this.width - this.columns * this.squareSize) / 2;\n    let originX = x - translateXY;\n    let originY = y - translateXY;\n    let isInside = this.isPointInRectangle(originX, originY);\n    // Click on the white circle to select it\n    if (isInside.inside) {\n      // Gets the square position in the top left corner of the clicked circle\n      let clickedColumn = Math.floor((isInside.point.x - this.squareSize) / this.squareSize);\n      let clickedRow = Math.floor((isInside.point.y - this.squareSize) / this.squareSize);\n      // Gets the rows and columns of the four smaller squares that make up the larger square\n      const topLeft = {\n        row: clickedRow,\n        column: clickedColumn\n      };\n      const topRight = {\n        row: clickedRow,\n        column: clickedColumn + 1\n      };\n      const bottomLeft = {\n        row: clickedRow + 1,\n        column: clickedColumn\n      };\n      const bottomRight = {\n        row: clickedRow + 1,\n        column: clickedColumn + 1\n      };\n      // Get data for four squares\n      const topLeftData = this.squares[topLeft.row * this.columns + topLeft.column];\n      const topRightData = this.squares[topRight.row * this.columns + topRight.column];\n      const bottomLeftData = this.squares[bottomLeft.row * this.columns + bottomLeft.column];\n      const bottomRightData = this.squares[bottomRight.row * this.columns + bottomRight.column];\n      // Reset all highlighted states\n      this.squares.forEach(item => item.highlight = false);\n      // If the four colors are not white and the colors are the same, change them to white, moveCounter+1\n      if (topLeftData.color !== \"white\" && topLeftData.color === topRightData.color && topLeftData.color === bottomLeftData.color && topLeftData.color === bottomRightData.color) {\n        topLeftData.color = topRightData.color = bottomLeftData.color = bottomRightData.color = \"white\";\n        this.moveCounter++;\n        this.emit({\n          type: \"moveCounter\",\n          data: this.moveCounter\n        });\n        this.emit({\n          type: \"message\",\n          data: `Pairing successful  !`\n        });\n        this.activeSquares = [];\n        this.points.forEach(item => item.highlight = false);\n        this.redraw();\n        this.checkGameOver();\n        return;\n      }\n      // Check that all four colors are white and ignore this operation\n      if (topLeftData.color === \"white\" && topRightData.color === \"white\" && bottomLeftData.color === \"white\" && bottomRightData.color === \"white\") {\n        this.activeSquares = [];\n        return;\n      }\n      // The four colors are not exactly the same, change their borders to red highlight\n      topLeftData.highlight = topRightData.highlight = bottomLeftData.highlight = bottomRightData.highlight = true;\n      this.activeSquares = [topLeftData, topRightData, bottomRightData, bottomLeftData];\n      this.redraw();\n      return;\n    }\n  }\n  // rotate clockwise counter-clockwise\n  rotate(type) {\n    if (this.gameOver) return;\n    if (!this.activeSquares.length) return;\n    let cloneActiveSquares = JSON.parse(JSON.stringify(this.activeSquares));\n    if (type === \"clockwise\") {\n      cloneActiveSquares.unshift(cloneActiveSquares.at(-1));\n      cloneActiveSquares.pop();\n    }\n    if (type === \"counterClockwise\") {\n      cloneActiveSquares.push(cloneActiveSquares[0]);\n      cloneActiveSquares.shift();\n    }\n    cloneActiveSquares.forEach((item, idx) => {\n      this.activeSquares[idx].color = item.color;\n    });\n    this.moveCounter += 1;\n    this.emit({\n      type: \"message\",\n      data: `Rotation successful.`\n    });\n    this.emit({\n      type: \"moveCounter\",\n      data: this.moveCounter\n    });\n    this.redraw();\n    this.checkGameOver();\n  }\n\n  // 5x5 Add a piece of data\n  addItem() {\n    if (this.squares.length < this.columns * this.columns) {\n      let lastItem = this.squares[this.squares.length - 1];\n      this.squares.push({\n        ...lastItem,\n        column: lastItem.column + 1,\n        color: \"white\"\n      });\n    }\n  }\n  // Determine if the click is in the circle\n  isPointInRectangle(clickX, clickY) {\n    let inside = false;\n    let point = {};\n    this.points.forEach(item => {\n      item.highlight = false;\n      // Calculate the distance between the click position and the center of the circle\n      const distance = Math.sqrt(Math.pow(clickX - item.x, 2) + Math.pow(clickY - item.y, 2));\n      // Determine whether the distance is less than or equal to the radius of the circle\n      if (distance <= this.circleRadius) {\n        // Click position inside the circle\n        inside = true;\n        item.highlight = true; // Add a highlighted state\n        point = {\n          x: item.x,\n          y: item.y\n        };\n      }\n    });\n    return {\n      inside,\n      point\n    };\n  }\n\n  // clear the canvas area before rendering the coordinates held in state\n  clearRect() {\n    this.ctx.clearRect(0, 0, this.width, this.height); // assume square region\n  }\n\n  //reset Matrix transformation\n  resetTransform() {\n    this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n  }\n  reset() {\n    this.loadModel(JSON.parse(JSON.stringify(this.originModel)));\n  }\n  destroy() {\n    this.canvas.removeEventListener(\"click\", this.bindClick);\n  }\n  checkGameOver() {\n    // 1.Rules of the game\n    let end = this.squares.every(i => i.color === \"white\");\n    if (end) {\n      this.emit({\n        type: \"message\",\n        data: `Congratulations, you win the game.`\n      });\n      this.emit({\n        type: \"gameOver\",\n        data: true\n      });\n      this.gameOver = true;\n      return;\n    }\n    // 2.Rules of the game 6x6\n    if (this.squares.length === 36 && this.moveCounter >= 5) {\n      // Find out if there are still dark blue squares\n      let blueSquares = this.squares.filter(i => i.color === darkblue);\n      if (blueSquares.length) {\n        this.gameOver = true;\n        this.emit({\n          type: \"message\",\n          data: `Sorry, you lose the game. You need to eliminate the dark blue square on the middle 6x6 board in 5 moves.`\n        });\n        this.emit({\n          type: \"gameOver\",\n          data: true\n        });\n        this.squares.forEach(i => i.highlight = false);\n        this.points.forEach(i => i.highlight = false);\n        this.redraw();\n        return;\n      }\n    }\n    // 3.Rules of the game 4x4\n    if (this.moveCounter >= 16 && this.squares.length === 16) {\n      // Find out if there are any squares that are not white\n      let whiteSquares = this.squares.filter(i => i.color !== \"white\");\n      if (whiteSquares.length) {\n        this.gameOver = true;\n        this.emit({\n          type: \"message\",\n          data: `Sorry, you lose the game. You need to complete the game in 16 moves.`\n        });\n        this.emit({\n          type: \"gameOver\",\n          data: true\n        });\n        this.squares.forEach(i => i.highlight = false);\n        this.points.forEach(i => i.highlight = false);\n        this.redraw();\n        return;\n      }\n    }\n    return end;\n  }\n}","map":{"version":3,"names":["darkblue","CanvasTool","constructor","canvasObj","callback","width","height","squareSize","circleRadius","model","undefined","originModel","columns","rows","minXY","maxXY","ctx","squares","points","activeSquares","canvas","moveCounter","gameOver","emit","bindClick","processClick","bind","getContext","addEventListener","loadModel","name","resetTransform","clearRect","JSON","parse","stringify","board","size","addItem","type","data","redraw","translateXY","translate","forEach","sq","idx","index","fillStyle","color","fillRect","column","row","cacheHighlight","highlight","strokeStyle","lineWidth","strokeRect","push","length","circleX","circleY","beginPath","arc","Math","PI","fill","stroke","x","y","point","e","canvasRect","getBoundingClientRect","clientX","left","clientY","top","originX","originY","isInside","isPointInRectangle","inside","clickedColumn","floor","clickedRow","topLeft","topRight","bottomLeft","bottomRight","topLeftData","topRightData","bottomLeftData","bottomRightData","item","checkGameOver","rotate","cloneActiveSquares","unshift","at","pop","shift","lastItem","clickX","clickY","distance","sqrt","pow","setTransform","reset","destroy","removeEventListener","end","every","i","blueSquares","filter","whiteSquares"],"sources":["/Users/jinqinxiong/Desktop/509 system design and analysis homework/madness-version2/src/libs/canvas.js"],"sourcesContent":["import {darkblue} from '../configs'\nexport default class CanvasTool {\n  width = 400; // canvas width\n  height = 400; // canvas height\n  squareSize = 60; // square size\n  circleRadius = 10; // circle radius\n  model = undefined; // model\n  originModel = undefined; // Backup model\n  columns = 4; // Default 4x4\n  rows = 4; // Default 4x4\n  minXY = this.squareSize; // The smallest coordinates of a circle\n  maxXY = (this.columns - 1) * this.minXY; // The maximum coordinates of a circle\n  ctx = undefined; // canvas context\n  squares = []; // Square array\n  points = []; // {x: number, y: number, highlight?: boolean}[]\n  activeSquares = []; // [topLeftData, topRightData, bottomRightData, bottomLeftData]\n  canvas = undefined;// Dom Canvas\n  moveCounter = 0; // move counter\n  gameOver = false; // gameOver\n  emit = () => { }; // Dispatch event\n  bindClick = this.processClick.bind(this)\n\n  constructor(canvasObj, callback) {\n    this.canvas = canvasObj;\n    this.ctx = canvasObj.getContext(\"2d\");\n    this.width = canvasObj.width;\n    this.height = canvasObj.height;\n    canvasObj.addEventListener(\"click\", this.bindClick); // Bind click event\n    this.emit = callback || (() => {});\n  }\n  // Load model Reset model\n  loadModel(model, name) {\n    // reset canvas\n    this.resetTransform();\n    this.clearRect();\n    // reset initial data\n    this.originModel = model;\n    this.model = JSON.parse(JSON.stringify(model));\n    this.columns = this.model.board.size;\n    this.rows = this.model.board.size;\n    this.maxXY = (this.columns - 1) * this.minXY;\n    this.squares = this.model.board.squares;\n    this.points = [];\n    this.activeSquares = [];\n    this.moveCounter = 0;\n    this.gameOver = false;\n    this.addItem(); // Add an Item 5x5\n    // dispatch event\n    this.emit({ type: \"message\", data: `Reset and load configuration ${name || \"\"} successfully` });\n    this.emit({ type: \"moveCounter\", data: 0 });\n    this.emit({ type: \"gameOver\", data: false });\n\n    this.redraw();\n  }\n  // redraw\n  redraw() {\n    this.resetTransform();\n    this.clearRect();\n    // set the origin to the top left of the canvas\n    let translateXY = (400 - this.columns * this.squareSize) / 2;\n    this.ctx.translate(translateXY, translateXY);\n\n    // DRAW SQUARES\n    this.squares.forEach((sq, idx) => {\n      sq.index = idx;\n      this.ctx.fillStyle = sq.color;\n      this.ctx.fillRect(sq.column * this.squareSize, sq.row * this.squareSize, this.squareSize, this.squareSize);\n    });\n\n    // DRAW  BOARD\n    let cacheHighlight = []; // Draw separately to avoid overlaying the highlighted layers\n    this.squares.forEach((sq) => {\n      if (!sq.highlight) {\n        this.ctx.strokeStyle = \"black\";\n        this.ctx.lineWidth = 4;\n        this.ctx.strokeRect(sq.column * this.squareSize, sq.row * this.squareSize, this.squareSize, this.squareSize);\n      } else {\n        cacheHighlight.push(sq);\n      }\n    });\n    cacheHighlight.forEach((sq) => {\n      this.ctx.strokeStyle = \"rgba(255, 0, 0, 1.00)\";\n      this.ctx.lineWidth = 4;\n      this.ctx.strokeRect(sq.column * this.squareSize, sq.row * this.squareSize, this.squareSize, this.squareSize);\n    });\n    // DRAW OR UPDATE CIRCLES\n    if (!this.points.length) {\n      this.squares.forEach((sq) => {\n        let circleX = sq.row * this.squareSize;\n        let circleY = sq.column * this.squareSize;\n        if (circleX >= this.minXY && circleY >= this.minXY && circleY <= this.maxXY && circleY <= this.maxXY) {\n          this.ctx.lineWidth = 2;\n          this.ctx.beginPath();\n          this.ctx.arc(circleX, circleY, this.circleRadius, 2 * Math.PI, false);\n          this.ctx.fillStyle = \"white\";\n          this.ctx.fill();\n          this.ctx.strokeStyle = \"black\";\n          this.ctx.stroke();\n          this.points.push({ x: circleX, y: circleY });\n        }\n      });\n    } else {\n      this.points.forEach((point) => {\n        this.ctx.lineWidth = 2;\n        this.ctx.beginPath();\n        this.ctx.arc(point.x, point.y, this.circleRadius, 2 * Math.PI, false);\n        this.ctx.fillStyle = point.highlight ? \"rgba(255, 0, 0, 1.00)\" : \"white\";\n        this.ctx.fill();\n        this.ctx.strokeStyle = point.highlight ? \"rgba(255, 0, 0, 1.00)\" : \"black\";\n        this.ctx.stroke();\n      });\n    }\n  }\n  // click event\n  processClick(e) {\n    if (this.gameOver) {\n      return;\n    }\n    // Determine if the click position is inside the circle\n    const canvasRect = this.canvas.getBoundingClientRect();\n    // normalizing RAW point into localized canvas coordinates.\n    let x = e.clientX - canvasRect.left;\n    let y = e.clientY - canvasRect.top;\n    let translateXY = (this.width - this.columns * this.squareSize) / 2;\n    let originX = x - translateXY;\n    let originY = y - translateXY;\n    let isInside = this.isPointInRectangle(originX, originY);\n    // Click on the white circle to select it\n    if (isInside.inside) {\n      // Gets the square position in the top left corner of the clicked circle\n      let clickedColumn = Math.floor((isInside.point.x - this.squareSize) / this.squareSize);\n      let clickedRow = Math.floor((isInside.point.y - this.squareSize) / this.squareSize);\n      // Gets the rows and columns of the four smaller squares that make up the larger square\n      const topLeft = { row: clickedRow, column: clickedColumn };\n      const topRight = { row: clickedRow, column: clickedColumn + 1 };\n      const bottomLeft = { row: clickedRow + 1, column: clickedColumn };\n      const bottomRight = { row: clickedRow + 1, column: clickedColumn + 1 };\n      // Get data for four squares\n      const topLeftData = this.squares[topLeft.row * this.columns + topLeft.column];\n      const topRightData = this.squares[topRight.row * this.columns + topRight.column];\n      const bottomLeftData = this.squares[bottomLeft.row * this.columns + bottomLeft.column];\n      const bottomRightData = this.squares[bottomRight.row * this.columns + bottomRight.column];\n      // Reset all highlighted states\n      this.squares.forEach((item) => (item.highlight = false));\n      // If the four colors are not white and the colors are the same, change them to white, moveCounter+1\n      if (\n        topLeftData.color !== \"white\" &&\n        topLeftData.color === topRightData.color &&\n        topLeftData.color === bottomLeftData.color &&\n        topLeftData.color === bottomRightData.color\n      ) {\n        topLeftData.color = topRightData.color = bottomLeftData.color = bottomRightData.color = \"white\";\n        this.moveCounter++;\n        this.emit({ type: \"moveCounter\", data: this.moveCounter });\n        this.emit({ type: \"message\", data: `Pairing successful  !` });\n        this.activeSquares = [];\n        this.points.forEach((item) => (item.highlight = false));\n        this.redraw();\n        this.checkGameOver();\n        return;\n      }\n      // Check that all four colors are white and ignore this operation\n      if (topLeftData.color === \"white\" && topRightData.color === \"white\" && bottomLeftData.color === \"white\" && bottomRightData.color === \"white\") {\n        this.activeSquares = [];\n        return;\n      }\n      // The four colors are not exactly the same, change their borders to red highlight\n      topLeftData.highlight = topRightData.highlight = bottomLeftData.highlight = bottomRightData.highlight = true;\n      this.activeSquares = [topLeftData, topRightData, bottomRightData, bottomLeftData];\n      this.redraw();\n      return;\n    }\n  }\n  // rotate clockwise counter-clockwise\n  rotate(type) {\n    if (this.gameOver) return;\n    if (!this.activeSquares.length) return;\n    let cloneActiveSquares = JSON.parse(JSON.stringify(this.activeSquares));\n    if (type === \"clockwise\") {\n      cloneActiveSquares.unshift(cloneActiveSquares.at(-1));\n      cloneActiveSquares.pop();\n    }\n    if (type === \"counterClockwise\") {\n      cloneActiveSquares.push(cloneActiveSquares[0]);\n      cloneActiveSquares.shift();\n    }\n    cloneActiveSquares.forEach((item, idx) => {\n      this.activeSquares[idx].color = item.color;\n    });\n\n    this.moveCounter += 1;\n    this.emit({ type: \"message\", data: `Rotation successful.` });\n    this.emit({ type: \"moveCounter\", data: this.moveCounter });\n    this.redraw();\n    this.checkGameOver();\n  }\n\n  // 5x5 Add a piece of data\n  addItem() {\n    if (this.squares.length < this.columns * this.columns) {\n      let lastItem = this.squares[this.squares.length - 1];\n      this.squares.push({\n        ...lastItem,\n        column: lastItem.column + 1,\n        color: \"white\",\n      });\n    }\n  }\n  // Determine if the click is in the circle\n  isPointInRectangle(clickX, clickY) {\n    let inside = false;\n    let point = {};\n    this.points.forEach((item) => {\n      item.highlight = false;\n      // Calculate the distance between the click position and the center of the circle\n      const distance = Math.sqrt(Math.pow(clickX - item.x, 2) + Math.pow(clickY - item.y, 2));\n      // Determine whether the distance is less than or equal to the radius of the circle\n      if (distance <= this.circleRadius) {\n        // Click position inside the circle\n        inside = true;\n        item.highlight = true; // Add a highlighted state\n        point = { x: item.x, y: item.y };\n      }\n    });\n    return {\n      inside,\n      point,\n    };\n  }\n\n  // clear the canvas area before rendering the coordinates held in state\n  clearRect() {\n    this.ctx.clearRect(0, 0, this.width, this.height); // assume square region\n  }\n\n  //reset Matrix transformation\n  resetTransform() {\n    this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n  }\n\n  reset() {\n    this.loadModel(JSON.parse(JSON.stringify(this.originModel)));\n  }\n\n  destroy() {\n    this.canvas.removeEventListener(\"click\", this.bindClick)\n  }\n\n  checkGameOver() {\n    // 1.Rules of the game\n    let end = this.squares.every((i) => i.color === \"white\");\n    if (end) {\n      this.emit({ type: \"message\", data: `Congratulations, you win the game.` });\n      this.emit({ type: \"gameOver\", data: true });\n      this.gameOver = true;\n      return;\n    }\n    // 2.Rules of the game 6x6\n    if (this.squares.length === 36 && this.moveCounter >= 5) {\n      // Find out if there are still dark blue squares\n      let blueSquares = this.squares.filter((i) => i.color === darkblue);\n      if (blueSquares.length) {\n        this.gameOver = true;\n        this.emit({\n          type: \"message\",\n          data: `Sorry, you lose the game. You need to eliminate the dark blue square on the middle 6x6 board in 5 moves.`,\n        });\n        this.emit({ type: \"gameOver\", data: true });\n        this.squares.forEach((i) => (i.highlight = false));\n        this.points.forEach((i) => (i.highlight = false));\n        this.redraw();\n        return;\n      }\n    }\n    // 3.Rules of the game 4x4\n    if (this.moveCounter >= 16 && this.squares.length === 16) {\n      // Find out if there are any squares that are not white\n      let whiteSquares = this.squares.filter((i) => i.color !== \"white\");\n      if (whiteSquares.length) {\n        this.gameOver = true;\n        this.emit({\n          type: \"message\",\n          data: `Sorry, you lose the game. You need to complete the game in 16 moves.`,\n        });\n        this.emit({ type: \"gameOver\", data: true });\n        this.squares.forEach((i) => (i.highlight = false));\n        this.points.forEach((i) => (i.highlight = false));\n        this.redraw();\n        return;\n      }\n    }\n    return end;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}